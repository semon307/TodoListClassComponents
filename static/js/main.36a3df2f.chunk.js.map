{"version":3,"sources":["components/app-header/app-header.tsx","components/search-panel/search-panel.tsx","components/todo-list-item/todo-list-item.tsx","components/todo-list/todo-list.tsx","components/item-status-filter/item-status-filter.tsx","components/item-add-form/item-add-form.tsx","components/app/app.tsx","index.tsx"],"names":["AppHeader","toDo","done","className","SearchPanel","state","term","onSearchChange","e","currentTarget","value","setState","props","placeholder","type","onChange","this","React","Component","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","important","classNames","onClick","TodoList","elements","todos","map","item","id","propsItems","ItemStatusFilter","buttons","name","filter","onFilterChange","clazz","ItemAddForm","onLabelChange","target","onSubmit","preventDefault","onItemAdded","onClickSubmit","saveState","key","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","App","maxId","todoData","createToDoItem","deleteItem","idx","findIndex","el","slice","addItem","text","newItem","toggleProperty","arr","propName","oldItem","items","length","toLowerCase","indexOf","visibleItems","search","doneCount","todoCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36a3df2f.chunk.js","sourcesContent":["import React from \"react\";\nimport './app-header.css'\nexport type AppHeaderPropsType = {\n    toDo: number\n    done: number\n}\nconst AppHeader = ({toDo, done}: AppHeaderPropsType) => {\n    return (\n    <div className=\"app-header d-flex\">\n        <h1>Todo List</h1>\n        <h2>{toDo} more to do, {done} done</h2>\n    </div>\n    );\n}\nexport default AppHeader;","import React, {ChangeEvent} from \"react\";\nimport './search-panel.css'\nexport type SearchPanelPropsType = {\n    onSearchChange: (term: string) => void\n}\nclass SearchPanel extends React.Component<SearchPanelPropsType> {\n    state = {\n        term: ''\n    }\n    onSearchChange = (e: ChangeEvent<HTMLInputElement>) =>{\n        const term = e.currentTarget.value\n        this.setState({term})\n        this.props.onSearchChange(term)\n    }\n\n    render() {\n\n        return (\n            <form >\n            <input placeholder=\"type to search\" type=\"text\" className=\"form-control search-input\"\n        onChange={this.onSearchChange} value={this.state.term}/>\n            </form>\n        );\n    }\n}\n\nexport default SearchPanel;","import React from \"react\";\nimport './todo-list-item.css'\ntype TodoListItemPropsType = {\n    label: string\n    important: boolean\n    done: boolean\n    onToggleImportant: () => void\n    onToggleDone: () => void\n    onDeleted: () => void\n}\n\n\nclass TodoListItem extends React.Component<TodoListItemPropsType> {\n    render() {\n        const {label, onDeleted, onToggleImportant, onToggleDone, important, done} = this.props\n\n        let classNames = \"todo-list-item d-flex justify-content-between\";\n        if (done)(\n            classNames += \" done\"\n        )\n        if (important)(\n            classNames += \" important\"\n        )\n\n        return (\n            <span className={classNames}>\n\n                <span onClick={onToggleDone} className=\"todo-list-item-label todo-list-item\" >{label}</span>\n    <div>\n            <button onClick={onToggleImportant} type=\"button\" className=\"btn btn-outline-success btn-sm float-right\">\n                <i className=\"fas fa-exclamation\"/>\n            </button>\n            <button onClick={onDeleted} type=\"button\" className=\"btn btn-outline-danger btn-sm float-right\">\n                <i className=\"fas fa-trash\"/>\n            </button>\n    </div>\n\n        </span>\n        )\n    }\n}\n\nexport default TodoListItem;","import React from \"react\";\nimport TodoListItem from \"../todo-list-item/todo-list-item\";\nimport './todo-list.css'\nimport {TodoDataType, TodoItemType} from \"../app/app\";\nexport type TodoListType = {\n    todos: TodoDataType\n    onToggleImportant: (id: number) => void\n    onToggleDone: (id: number) => void\n    onDeleted: (id: number) => void\n}\nconst TodoList = (props: TodoListType) => {\n    const elements = props.todos.map((item: TodoItemType) =>{\n            //деструткурируем item так, что свойство id становится переменной id,\n        // а остальная часть объекта становится объектом propsItems\n        const { id, ...propsItems } = item;\n        return (\n            <div key={id} className=\"list-group-item\">\n                <TodoListItem {...propsItems} onDeleted={() => props.onDeleted(id)}\n                onToggleImportant={() => props.onToggleImportant(id)} onToggleDone={() => props.onToggleDone(id)}/>\n            </div>\n        )\n    })\n    return (\n        <div className=\"list-group todo-list\">\n            {elements}\n        </div>\n    )\n}\nexport default TodoList;","import React from \"react\";\nimport './item-status-filter.css'\nimport {FilterType} from \"../app/app\";\ntype ItemStatusFilterPropsType = {\n    filter: FilterType\n    onFilterChange: (filter: FilterType) => void\n}\ntype ButtonType = {\n    name: FilterType\n    label: \"All\" | \"Active\" | \"Done\"\n}\ntype ButtonsType = Array<ButtonType>\n\nclass ItemStatusFilter extends React.Component<ItemStatusFilterPropsType> {\n    buttons: ButtonsType = [\n        {name: \"all\", label: \"All\"},\n        {name: \"active\", label: \"Active\"},\n        {name: \"done\", label: \"Done\"},\n    ]\n    render() {\n        const {filter, onFilterChange} = this.props\n\n        const buttons = this.buttons.map((buttons) => {\n           const isActive = filter === buttons.name;\n           const clazz = isActive ? \"btn-info\" : \"btn-outline-secondary\";\n            return (\n                <button type=\"button\" key={buttons.name} className={`btn ${clazz}`}\n                        onClick={() => onFilterChange(buttons.name)}>\n                    {buttons.label}\n                </button>\n            )\n        })\n        return (\n            <div className=\"btn-group\">\n                {buttons}\n            </div>\n        )\n    }\n}\n\nexport default ItemStatusFilter;","import React, {ChangeEvent, FormEvent} from 'react';\ntype ItemAddFormPropsType = {\n    onItemAdded: (text: string) => void\n}\n\nclass ItemAddForm extends React.Component<ItemAddFormPropsType> {\n    state = {\n        label: \"\"\n    }\n    onLabelChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({label: e.target.value})\n    }\n    onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        this.props.onItemAdded(this.state.label)\n        this.setState({\n            label: \"\"\n        })\n    }\n    onClickSubmit = () => {\n        if (this.state.label) {\n            this.props.onItemAdded(this.state.label)\n        }\n        this.setState({\n            label: \"\"\n        })\n    }\n\n    render() {\n        return (\n            <form className=\"item-add-form d-flex\" onSubmit={this.onSubmit}>\n                <input type=\"text\" className=\"form-control\" onChange={this.onLabelChange} placeholder=\"What needs to be done\"\n                value={this.state.label}/>\n                <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={this.onClickSubmit}>Add Item</button>\n            </form>\n        )\n    }\n}\n\nexport default ItemAddForm;","import React from \"react\";\nimport AppHeader from \"../app-header/app-header\";\nimport SearchPanel from \"../search-panel/search-panel\";\nimport TodoList from \"../todo-list/todo-list\";\nimport ItemStatusFilter from \"../item-status-filter/item-status-filter\";\nimport './app.css'\nimport ItemAddForm from \"../item-add-form/item-add-form\";\n\nconst important = \"important\"\nconst done = \"done\"\nexport type PropNameType = \"important\" | \"done\"\nexport type FilterType = \"all\" | \"active\" | \"done\"\nexport type TodoItemType = {\n    label: string\n    important: boolean\n    done: boolean\n    id: number\n}\nexport type TodoDataType = Array<TodoItemType>\nexport type StateType = {\n    todoData: TodoDataType\n    term: \"\" | \"important\" | \"done\"\n    filter: FilterType\n}\n\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state)\n    localStorage.setItem(key, stateAsString)\n}\n\nexport function restoreState<T>(key: string, defaultState: T) {\n    let state = defaultState\n    const stateAsString = localStorage.getItem(key)\n    if (stateAsString !== null) state = JSON.parse(stateAsString) as T\n    return state\n}\n\nclass App extends React.Component {\n    maxId: number = 100;\n\n    createToDoItem(label: string) {\n        return {\n            label,\n            [important]: false,\n            [done]: false,\n            id: this.maxId++\n        }\n    }\n\n    state: StateType = restoreState<StateType>(\"current-state\", {\n        todoData: [\n            this.createToDoItem(\"Drink Coffee\"),\n            this.createToDoItem(\"Build React App\"),\n            this.createToDoItem(\"Have a lunch\"),\n        ],\n        term: \"\",\n        filter: \"all\"\n    })\n\n    deleteItem = (id: number) => {\n        const idx = this.state.todoData.findIndex((el: TodoItemType) => el.id === id);\n        this.setState((state) => {\n\n            return {\n                todoData: [\n                    ...this.state.todoData.slice(0, idx),\n                    ...this.state.todoData.slice(idx + 1)]\n            }\n        })\n        saveState<StateType>(\"current-state\", {...this.state, todoData: [...this.state.todoData.slice(0, idx),\n                ...this.state.todoData.slice(idx + 1)]})\n    }\n    addItem = (text: string) => {\n        const newItem = this.createToDoItem(text);\n\n        this.setState((state) => {\n            const newArray = [...this.state.todoData, newItem];\n            return {\n                todoData: newArray\n            }\n        })\n        saveState<StateType>(\"current-state\", {...this.state, todoData: [...this.state.todoData, this.createToDoItem(text)]})\n    }\n\n    toggleProperty(arr: TodoDataType, id: number, propName: PropNameType) {\n        const idx = arr.findIndex((el: TodoItemType) => el.id === id);\n        const oldItem = arr[idx];\n        const newItem = {...oldItem, [propName]: !oldItem[propName]}\n        return [\n            ...arr.slice(0, idx),\n            newItem,\n            ...arr.slice(idx + 1)];\n    }\n\n    onToggleImportant = (id: number) => {\n        this.setState((state) => {\n            return {\n                todoData: this.toggleProperty(this.state.todoData, id, \"important\")\n            }\n        })\n        saveState<StateType>(\"current-state\", {...this.state, todoData: this.toggleProperty(this.state.todoData, id, \"important\")})\n    }\n    onToggleDone = (id: number) => {\n        this.setState((state) => {\n            return {\n                todoData: this.toggleProperty(this.state.todoData, id, \"done\")\n            }\n        })\n        saveState<StateType>(\"current-state\", {...this.state, todoData: this.toggleProperty(this.state.todoData, id, \"done\")})\n    }\n\n    search(items: TodoDataType, term: string) {\n        if (term.length === 0) {\n            return items\n        }\n        return items.filter((item: TodoItemType) => {\n            return item.label.toLowerCase().indexOf(term) > -1\n        })\n    }\n\n    onSearchChange = (term: string) => {\n        this.setState({term})\n    }\n\n\n    filter(items: TodoDataType, filter: FilterType) {\n        switch (filter) {\n            case \"all\":\n                return items;\n            case \"active\":\n                return items.filter((item: TodoItemType) => !item.done);\n            case \"done\":\n                return items.filter((item: TodoItemType) => item.done);\n            default:\n                return items;\n        }\n    }\n\n    onFilterChange = (filter: FilterType) => {\n        this.setState({filter})\n    }\n\n    render() {\n        const {todoData, term, filter} = this.state;\n        const visibleItems = this.filter(this.search(todoData, term), filter)\n        const doneCount = todoData.filter((el) => el.done).length\n        const todoCount = todoData.length - doneCount;\n        return (\n            <div className=\"todo-app\">\n\n                <AppHeader toDo={todoCount} done={doneCount}/>\n                <div className=\"top-panel d-flex\">\n                    <SearchPanel onSearchChange={this.onSearchChange}/>\n                    <ItemStatusFilter filter={filter} onFilterChange={this.onFilterChange}/>\n                </div>\n                <TodoList todos={visibleItems} onDeleted={this.deleteItem}\n                          onToggleImportant={this.onToggleImportant} onToggleDone={this.onToggleDone}/>\n                <ItemAddForm onItemAdded={this.addItem}/>\n\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app/app\";\n\n    ReactDOM.render(<App/>, document.getElementById(\"root\"))\n\n\n"],"sourceRoot":""}